import streamlit as st
import requests
import io
from PIL import Image, ImageOps
import numpy as np
import torch
import torchvision.transforms as transforms

API_URL = "https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5"
headers = {"API_KEY"}

def query(payload):
    response = requests.post(API_URL, headers=headers, json=payload)
    return response.content

def import_and_predict(image_data, model):
    prediction_transform = transforms.Compose([transforms.Resize(size=(224, 224)),
                                               transforms.ToTensor(),
                                               transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])])

    image = prediction_transform(image_data)[:3, :, :].unsqueeze(0)

    with torch.no_grad():
        prediction = model(image)

    return prediction

# Load the model from .pth file, mapping it to the CPU
model = torch.load('model_final.pth', map_location=torch.device('cpu'))

st.write("""
# Stable Diffusion Text to Image generation and Classifier
""")

# Input text query for image generation
text = st.text_input('Enter text query for image generation')

# Image generation
image_bytes = query({
    "inputs": text,
})

def predict(image):
    prediction_transform = transforms.Compose([transforms.Resize(size=(224, 224)),
                                               transforms.ToTensor(),
                                               transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])])

    image = prediction_transform(image)[:3, :, :].unsqueeze(0)

    with torch.no_grad():
        prediction = model(image)

    return prediction

# Convert image bytes to PIL Image
generated_image = Image.open(io.BytesIO(image_bytes))

# Perform prediction on the generated image
prediction = predict(generated_image)

class_names = ['Fire', 'Neutral', 'Smoke']
predicted_class = class_names[np.argmax(prediction)]

st.image(generated_image, caption='Image generated by Stable Diffusion', use_column_width=True)
st.write(f"Predicted Class: {predicted_class}")
st.write(f"Confidence Percentage: {prediction[0][np.argmax(prediction)].item()*100:.2f}%")
